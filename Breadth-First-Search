import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class BalancedTree {
	public static void main(String args[]){
		CreateTree la= new CreateTree();

		la.insert(30);
		la.insert(8);
		la.insert(52);
		la.insert(3);
		la.insert(20);
		la.insert(10);
		la.insert(29);
		
la.searchTree(-1);
		
	}
private static class CreateTree{
		private static class BSTNode{
			int key;

			BSTNode left,right,parent;

			public BSTNode(int key){
				this.key = key;
				this.left = null;
				this.right = null;
				this.parent = null;
			}

		}
		BSTNode root = null;

		public void insert(int key){

			root = insert(root,key);

		}
		public BSTNode insert(BSTNode currNode, int key){

			if(currNode == null){
				return new BSTNode(key);

			}else{
				if(key<=currNode.key){
					//node = currNode;
					currNode.left = insert(currNode.left,key);
					currNode.left.parent = currNode;

				}else{
					//	node = currNode;
					currNode.right = insert(currNode.right,key);
					currNode.right.parent = currNode;

				}
			}
			return currNode;
		}
		public boolean bfs(BSTNode node, int key){
			Queue<BSTNode> queue = new LinkedList<BSTNode>();
			queue.add(node);
			BSTNode tmpNode;
			while(!queue.isEmpty()){
				tmpNode = queue.remove();
				if(tmpNode.key == key){
					return true;
				}else{
					if(tmpNode.left!=null){
						queue.add(tmpNode.left);
					}
					if(tmpNode.right!=null){
						queue.add(tmpNode.right);
					}
				}
			}
			return false;
		}
	
	}
}
